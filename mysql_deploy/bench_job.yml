apiVersion: batch/v1
kind: Job
metadata:
  name: mysql-sysbench
  namespace: arvan-test
spec:
  backoffLimit: 0
  template:
    spec:
      restartPolicy: Never
      volumes:
      - name: output
        emptyDir: {}
      initContainers:
      - name: prepare-sysbench
        image: debian:12-slim
        command: [ "/bin/bash", "-lc" ]
        env:
        - name: MYSQL_HOST
          value: "mysql-master-svc"
        - name: MYSQL_USER
          value: "root"
        - name: MYSQL_PWD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: ROOT_PASSWORD
        - name: SB_DB
          value: "demo"
        - name: SB_TABLES
          value: "16"
        - name: SB_TABLE_SIZE
          value: "100000"
        args:
        - |
          set -exuo pipefail
          echo "[prep] install tools"
          apt-get update
          apt-get install -y --no-install-recommends sysbench default-mysql-client ca-certificates
          update-ca-certificates || true

          echo "[prep] wait for mysql"
          for i in {1..60}; do
            if mysqladmin -h "$MYSQL_HOST" -u "$MYSQL_USER" -p"$MYSQL_PWD" ping >/dev/null 2>&1; then
              echo "[prep] mysql is up"; break
            fi
            echo "[prep] retry $i/60 ..."
            sleep 2
          done

          echo "[prep] create db if not exists: ${SB_DB}"
          mysql -h "$MYSQL_HOST" -u "$MYSQL_USER" -p"$MYSQL_PWD" -e "CREATE DATABASE IF NOT EXISTS \`${SB_DB}\`;"

          echo "[verify] counting existing sbtest tables in ${SB_DB}"
          EXISTING=$(mysql -h "$MYSQL_HOST" -u "$MYSQL_USER" -p"$MYSQL_PWD" -N -D "$SB_DB" \
            -e "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema='$SB_DB' AND table_name LIKE 'sbtest%';" || echo 0)
          echo "[verify] found $EXISTING tables; expected ${SB_TABLES}"

          if [ "${EXISTING:-0}" -eq 0 ]; then
            echo "[prepare] no tables → running prepare (tables=${SB_TABLES}, size=${SB_TABLE_SIZE})"
            sysbench oltp_read_write \
              --mysql-host="$MYSQL_HOST" --mysql-user="$MYSQL_USER" --mysql-password="$MYSQL_PWD" \
              --mysql-db="$SB_DB" --tables="$SB_TABLES" --table-size="$SB_TABLE_SIZE" prepare
          elif [ "${EXISTING:-0}" -eq "${SB_TABLES:-16}" ]; then
            echo "[prepare] already prepared (${EXISTING} tables) → skipping"
          else
            echo "[prepare] partial/mismatch ($EXISTING != $SB_TABLES) → cleanup then prepare fresh"
            sysbench oltp_read_write \
              --mysql-host="$MYSQL_HOST" --mysql-user="$MYSQL_USER" --mysql-password="$MYSQL_PWD" \
              --mysql-db="$SB_DB" --tables="$SB_TABLES" cleanup || true
            sysbench oltp_read_write \
              --mysql-host="$MYSQL_HOST" --mysql-user="$MYSQL_USER" --mysql-password="$MYSQL_PWD" \
              --mysql-db="$SB_DB" --tables="$SB_TABLES" --table-size="$SB_TABLE_SIZE" prepare
          fi

          echo "[verify] list sbtest tables"
          mysql -h "$MYSQL_HOST" -u "$MYSQL_USER" -p"$MYSQL_PWD" -D "$SB_DB" -e "SHOW TABLES LIKE 'sbtest%';"

      containers:
      - name: run-sysbench
        image: debian:12-slim
        command: [ "/bin/bash", "-lc" ]
        env:
        # MySQL
        - name: MYSQL_HOST
          value: "mysql-master-svc"
        - name: MYSQL_USER
          value: "root"
        - name: MYSQL_PWD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: ROOT_PASSWORD
        - name: SB_DB
          value: "demo"
        - name: SB_TABLES
          value: "4"
        - name: SB_TABLE_SIZE
          value: "30000"
        - name: DUR
          value: "60"
        - name: THREADS
          value: "1 2"
        - name: PHASE
          value: "after"
        - name: S3_RESULTS
          value: "arvan-write/benchmark/benchmarks"
        envFrom:
        - secretRef: { name: s3-auth } # S3_ENDPOINT, S3_ACCESS_KEY_ID_WRITE, S3_SECRET_ACCESS_KEY_WRITE
        args:
        - |
          set -exuo pipefail
          apt-get update
          apt-get install -y --no-install-recommends sysbench default-mysql-client curl ca-certificates || true
          echo "[run] host=$MYSQL_HOST db=$SB_DB threads=[$THREADS] dur=${DUR}s"
          TS=$(date +%F-%H%M%S)
          CSV="/results/sysbench-${PHASE}-${TS}.csv"
          echo "phase,test,threads,tps,latency_p95_ms" > "$CSV"

          run_one () { # $1=lua
            local LUA=$1
            for th in $THREADS; do
              echo "===== $LUA  threads=$th  dur=${DUR}s ====="
              OUT=$(sysbench "$LUA" \
                --mysql-host=$MYSQL_HOST --mysql-user=$MYSQL_USER --mysql-password=$MYSQL_PWD \
                --mysql-db=$SB_DB --tables=$SB_TABLES --table-size=$SB_TABLE_SIZE \
                --threads=$th --time=$DUR --report-interval=10 run)
              echo "$OUT"
              
              TPS=$(printf "%s" "$OUT" \
                        | awk -F'[()]' '/^ *transactions:/ {gsub(/^[ \t]+/,"",$2); split($2,a," "); print a[1]; exit}')

              P95=$(printf "%s" "$OUT" \
                        | awk -F': ' '/95th percentile/ {gsub(/[^0-9.]/,"",$2); print $2; exit}')

              echo "${PHASE},${LUA},${th},${TPS:-0},${P95:-0}" >> "$CSV"
            done
          }

          run_one oltp_point_select
          run_one oltp_read_only
          run_one oltp_read_write

          echo "[results] CSV ready → $CSV"
          cat "$CSV"

          if [ -n "${S3_ENDPOINT:-}" ] && [ -n "${S3_ACCESS_KEY_ID_BENCHMARK_WRITE:-}" ] && [ -n "${S3_SECRET_ACCESS_KEY_BENCHMARK_WRITE:-}" ]; then
            echo "[s3] upload results"
            curl -sSL https://dl.min.io/client/mc/release/linux-amd64/mc -o /usr/local/bin/mc && chmod +x /usr/local/bin/mc
            mc alias set arvan-write "$S3_ENDPOINT" "$S3_ACCESS_KEY_ID_BENCHMARK_WRITE" "$S3_SECRET_ACCESS_KEY_BENCHMARK_WRITE" --insecure
            mc mb --ignore-existing "$S3_RESULTS" --insecure
            mc cp "$CSV" "$S3_RESULTS/" --insecure
          else
            echo "[s3] skipped (no creds/env)"
          fi
        volumeMounts:
        - name: output
          mountPath: /results
