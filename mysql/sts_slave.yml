apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql-slave
  namespace: arvan-test
spec:
  serviceName: mysql-slave
  replicas: 1
  selector:
    matchLabels:
      app: mysql-slave
  template:
    metadata:
      labels:
        app: mysql-slave
        component: mysql # Common label for monitoring
    spec:
      initContainers:
      - name: configure-replication
        image: mysql:8.0
        command: [ '/bin/bash', '-c' ]
        args:k 
        - |
          set -ex
          # FIX: Wait for the DNS record to be available first.
          until nslookup mysql-master.arvan-test.svc.cluster.local; do
            echo "Waiting for master DNS record to be available..."
            sleep 2
          done
          echo "DNS record for master found."

          # Now, wait for the master MySQL server to accept connections.
          until mysql -h mysql-master.arvan-test.svc.cluster.local -u root -p$MYSQL_ROOT_PASSWORD -e 'SELECT 1'; do
            echo "Waiting for master MySQL server to be ready..."
            sleep 2
          done
          echo "Master is ready."

          # Create replication user and configure slave
          mysql -h mysql-master.arvan-test.svc.cluster.local -u root -p$MYSQL_ROOT_PASSWORD -e "CREATE USER IF NOT EXISTS 'replicator'@'%' IDENTIFIED BY '$REPLICATION_PASSWORD'; GRANT REPLICATION SLAVE ON *.* TO 'replicator'@'%'; FLUSH PRIVILEGES;"
          MASTER_LOG_FILE=$(mysql -h mysql-master.arvan-test.svc.cluster.local -u root -p$MYSQL_ROOT_PASSWORD -e "SHOW MASTER STATUS\G" | grep "File:" | awk '{print $2}')
          MASTER_LOG_POS=$(mysql -h mysql-master.arvan-test.svc.cluster.local -u root -p$MYSQL_ROOT_PASSWORD -e "SHOW MASTER STATUS\G" | grep "Position:" | awk '{print $2}')
          mysql -u root -p$MYSQL_ROOT_PASSWORD -e "CHANGE MASTER TO MASTER_HOST='mysql-master.arvan-test.svc.cluster.local', MASTER_USER='replicator', MASTER_PASSWORD='$REPLICATION_PASSWORD', MASTER_LOG_FILE='$MASTER_LOG_FILE', MASTER_LOG_POS=$MASTER_LOG_POS; START SLAVE;"
          echo "Slave configured and started."
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secrets
              key: ROOT_PASSWORD
        - name: REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secrets
              key: REPLICATION_PASSWORD
      containers:
      - name: mysql
        image: mysql:8.0
        ports:
        - containerPort: 3306
          name: mysql
        resources:
          requests:
            cpu: "4"
            memory: "8Gi"
          limits:
            cpu: "4"
            memory: "8Gi"
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secrets
              key: ROOT_PASSWORD
        volumeMounts:
        - name: mysql-slave-data
          mountPath: /var/lib/mysql
        - name: mysql-slave-config
          mountPath: /etc/mysql/conf.d
      - name: mysql-exporter
        image: prom/mysqld-exporter:v0.14.0
        args: [ "--collect.info_schema.tables.databases='*'" ]
        ports:
        - containerPort: 9104
          name: metrics
        env:
        - name: DATA_SOURCE_NAME
          value: "root:$(MYSQL_ROOT_PASSWORD)@(localhost:3306)/"
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secrets
              key: ROOT_PASSWORD
      volumes:
      - name: mysql-slave-config
        configMap:
          name: mysql-slave-config
  volumeClaimTemplates:
  - metadata:
      name: mysql-slave-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 20Gi
